[{"model": "blog.post", "pk": "1b41316e-a8c3-4bdf-90ed-b166649ba9b5", "fields": {"title": "Python Countdown Timer", "author": 1, "publish": "2022-08-19T20:05:30Z", "created": "2022-08-19T20:05:30Z", "updated": "2022-08-19T20:05:30Z", "img": "blog/images/5848152fcef1014c0b5e4967.png", "status": "published", "synopsis": "Have you ever wondered how you can make a countdown timer in python, let's go!", "content": "<p>import time def countdown(x: int): cnt = x for i in range(x): cnt -=i print(cnt) time.sleep(1) print('time up!')</p>", "category": "general"}}, {"model": "blog.post", "pk": "aa5d4a71-9ae4-4183-b80c-5e5d4631d997", "fields": {"title": "Test Blog", "author": 1, "publish": "2022-08-19T11:09:30Z", "created": "2022-08-19T11:09:30Z", "updated": "2022-08-19T11:09:30Z", "img": "", "status": "published", "synopsis": "", "content": "<p><span style=\"color: #169179;\"><strong>BLOG PREMIERE</strong></span></p>\r\n<p>Nothing much just testing the workings of the site.</p>\r\n<p>Contact the developer for more information at <a href=\"https://fireportf.herokuapp.com\" target=\"_blank\" rel=\"noopener\">Fireb_corps</a></p>", "category": "general"}}, {"model": "blog.post", "pk": "d79c54ba-35f6-49c7-b650-5ec20029c6cc", "fields": {"title": "Newton", "author": 1, "publish": "2022-08-19T12:05:44Z", "created": "2022-08-19T12:05:44Z", "updated": "2022-08-19T12:05:44Z", "img": "blog/images/fppf.png", "status": "published", "synopsis": "", "content": "", "category": "general"}}, {"model": "blog.post", "pk": "f4a9e005-fc23-4c01-ab89-2d73b1a7bfc8", "fields": {"title": "The Craziest Dict Expression in the West", "author": 1, "publish": "2022-08-20T20:53:19Z", "created": "2022-08-20T20:53:19Z", "updated": "2022-08-20T20:53:19Z", "img": "blog/images/logo.png", "status": "published", "synopsis": "Find out how crazy python dictionaries can really be.", "content": "<p>Sometimes you strike upon a tiny code example that has real depth to it&mdash;a single line of code that can teach you a lot about a programming language if you ponder it enough. Such a code snippet feels like a Zen k┼ìan: a question or statement used in Zen practice to provoke doubt and test the student&rsquo;s progress. The tiny little code snippet we&rsquo;ll discuss in this chapter is one such example. Upon first glance, it might seem like a straightforward dic\u0002tionary expression, but when considered at close range, it takes you on a mind-expanding journey through the CPython interpreter. I get such a kick out of this little one-liner that at one point I had it printed on my Python conference badges as a conversation starter. It also led to some rewarding conversations with members of my Python newsletter. So without further ado, here is the code snippet. Take a moment to reflect on the following dictionary expression and what it will evaluate to: &gt;&gt;&gt; {True: 'yes', 1: 'no', 1.0: 'maybe'} I&rsquo;ll wait here&hellip; Ok, ready? This is the result we get when evaluating the above dict expression in a CPython interpreter session: &gt;&gt;&gt; {True: 'yes', 1: 'no', 1.0: 'maybe'} {True: 'maybe'} I&rsquo;ll admit I was pretty surprised about this result the first time I saw it. But it all makes sense when you investigate what happens, stepby step. So, let&rsquo;s think about why we get this&mdash;I want to say slightly unintuitive&mdash;result. When Python processes our dictionary expression, it first constructs a new empty dictionary object; and then it assigns the keys and values to it in the order given in the dict expression. Therefore, when we break it down, our dict expression is equivalent to this sequence of statements that are executed in order:</p>\r\n<pre class=\"language-python\"><code>&gt;&gt;&gt; xs = dict()\r\n&gt;&gt;&gt; xs[True] = 'yes'\r\n&gt;&gt;&gt; xs[1] = 'no'\r\n&gt;&gt;&gt; xs[1.0] = 'maybe'</code></pre>\r\n<p><span style=\"background-color: #95a5a6;\"><code></code></span></p>\r\n<p><span style=\"background-color: #95a5a6;\"><span style=\"background-color: #ffffff;\">Oddly enough, Python considers all dictionary keys used in this example to be equal:</span></span></p>\r\n<p><span style=\"background-color: #95a5a6;\"><span style=\"background-color: #ffffff;\">Okay, but wait a minute here. I&rsquo;m sure you can intuitively accept that 1.0 == 1, but why would True be considered equal to 1 as well? The first time I saw this dictionary expression it really stumped me. After doing some digging in the Python documentation, I learned that Python treats bool as a subclass of int. This is the case in Python 2 and Python 3: &ldquo;The Boolean type is a subtype of the integer type, and Boolean values behave like the values 0 and 1, respectively, in almost all contexts, the exception being that when converted to a string, the strings &lsquo;False&rsquo; or &lsquo;True&rsquo; are returned, respectively.&rdquo;3.</span></span></p>\r\n<p><span style=\"background-color: #95a5a6;\"><span style=\"background-color: #ffffff;\">....to be continue&nbsp;</span></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"background-color: #95a5a6;\"><code></code></span></p>", "category": "tech"}}]
